"use strict";

var ApplicationConfiguration = function() {
    var a = "inoviceit", b = [ "ngResource", "ngCookies", "ngAnimate", "ngTouch", "ngSanitize", "ui.router", "ui.bootstrap", "ui.utils", "ngGrid" ], c = function(b, c) {
        angular.module(b, c || []), angular.module(a).requires.push(b);
    };
    return {
        applicationModuleName: a,
        applicationModuleVendorDependencies: b,
        registerModule: c
    };
}();

angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies), 
angular.module(ApplicationConfiguration.applicationModuleName).config([ "$locationProvider", function(a) {
    a.hashPrefix("!");
} ]), angular.element(document).ready(function() {
    "#_=_" === window.location.hash && (window.location.hash = "#!"), angular.bootstrap(document, [ ApplicationConfiguration.applicationModuleName ]);
}), ApplicationConfiguration.registerModule("accounts"), ApplicationConfiguration.registerModule("airtel"), 
ApplicationConfiguration.registerModule("contacts"), ApplicationConfiguration.registerModule("core"), 
ApplicationConfiguration.registerModule("licenses"), ApplicationConfiguration.registerModule("organizations"), 
ApplicationConfiguration.registerModule("roles"), ApplicationConfiguration.registerModule("users"), 
angular.module("accounts").run([ "Menus", function(a) {
    a.addMenuItem("topbar", "Accounts", "accounts", "dropdown", "/accounts(/create)?"), 
    a.addSubMenuItem("topbar", "accounts", "List Accounts", "accounts"), a.addSubMenuItem("topbar", "accounts", "New Account", "accounts/create");
} ]), angular.module("accounts").config([ "$stateProvider", function(a) {
    a.state("listAccounts", {
        url: "/accounts",
        templateUrl: "modules/accounts/views/list-accounts.client.view.html"
    }).state("createAccount", {
        url: "/accounts/create",
        templateUrl: "modules/accounts/views/create-account.client.view.html"
    }).state("viewAccount", {
        url: "/accounts/:accountId",
        templateUrl: "modules/accounts/views/view-account.client.view.html"
    }).state("editAccount", {
        url: "/accounts/:accountId/edit",
        templateUrl: "modules/accounts/views/edit-account.client.view.html"
    });
} ]), angular.module("accounts").controller("AccountsController", [ "$scope", "$stateParams", "$location", "Authentication", "Accounts", "$http", function(a, b, c, d, e, f) {
    a.authentication = d, a.myData = [], a.myData = e.query(), a.mySelections = [], 
    a.filterOptions = {
        filterText: "",
        useExternalFilter: !0
    }, a.totalServerItems = 0, a.pagingOptions = {
        pageSizes: [ 250, 500, 1e3 ],
        pageSize: 250,
        currentPage: 1
    }, a.setPagingData = function(b, c, d) {
        var e = b.slice((c - 1) * d, c * d);
        a.myData = e, a.totalServerItems = b.length, a.$$phase || a.$apply();
    }, a.getPagedDataAsync = function(b, c, d) {
        setTimeout(function() {
            var e;
            if (d) {
                var g = d.toLowerCase();
                f.get("jsonFiles/largeLoad.json").success(function(d) {
                    e = d.filter(function(a) {
                        return -1 != JSON.stringify(a).toLowerCase().indexOf(g);
                    }), a.setPagingData(e, c, b);
                });
            } else f.get("jsonFiles/largeLoad.json").success(function(d) {
                a.setPagingData(d, c, b);
            });
        }, 100);
    }, a.getPagedDataAsync(a.pagingOptions.pageSize, a.pagingOptions.currentPage), a.$watch("pagingOptions", function(b, c) {
        b !== c && b.currentPage !== c.currentPage && a.getPagedDataAsync(a.pagingOptions.pageSize, a.pagingOptions.currentPage, a.filterOptions.filterText);
    }, !0), a.$watch("filterOptions", function(b, c) {
        b !== c && a.getPagedDataAsync(a.pagingOptions.pageSize, a.pagingOptions.currentPage, a.filterOptions.filterText);
    }, !0), a.gridOptions = {
        data: "myData",
        enablePaging: !0,
        showFooter: !0,
        totalServerItems: "totalServerItems",
        pagingOptions: a.pagingOptions,
        filterOptions: a.filterOptions,
        selectedItems: a.mySelections,
        multiSelect: !1,
        columnDefs: [ {
            field: "firstName__C",
            displayName: "First Name"
        }, {
            field: "lastName__C",
            displayName: "Last Name"
        }, {
            field: "company__C",
            displayName: "Company"
        }, {
            field: "phone__C",
            displayName: "Phone"
        }, {
            field: "address__C",
            displayName: "Address"
        }, {
            field: "date__C",
            displayName: "Date"
        }, {
            field: "country__c",
            displayName: "Country"
        } ]
    }, a.create = function() {
        if (angular.isUndefined(this.id__C)) {
            var b = new e({
                firstName__C: this.firstName__C,
                lastName__C: this.lastName__C,
                company__C: this.company__C,
                phone__C: this.phone__C,
                address__C: this.address__C,
                date__C: this.date__C,
                country__c: this.country__c
            });
            b.$save(function() {
                a.firstName__C = "", a.lastName__C = "", a.company__C = "", a.phone__C = "", a.address__C = "", 
                a.date__C = "", a.country__c = "", a.myData = e.query();
            }, function(b) {
                a.error = b.data.message;
            });
        } else {
            var b = new e({
                firstName__C: this.firstName__C,
                lastName__C: this.lastName__C,
                company__C: this.company__C,
                phone__C: this.phone__C,
                address__C: this.address__C,
                date__C: this.date__C,
                country__c: this.country__c,
                _id: this.id__C
            });
            a.update(b);
        }
    }, a.remove = function(b) {
        if (b) {
            b.$remove();
            for (var c in a.accounts) a.accounts[c] === b && a.accounts.splice(c, 1);
        } else a.account.$remove(function() {
            a.myData = e.query();
        });
    }, a.update = function(b) {
        console.log(b), b.$update(function() {
            a.firstName__C = "", a.lastName__C = "", a.company__C = "", a.phone__C = "", a.address__C = "", 
            a.date__C = "", a.country__c = "", a.id__C = "", a.myData = e.query();
        }, function(b) {
            a.error = b.data.message;
        });
    }, a.find = function() {
        a.accounts = e.query();
    }, a.findOne = function() {
        a.account = e.get({
            accountId: b.accountId
        });
    }, a.findOnebyId = function() {
        a.account = e.get({
            accountId: a.mySelections[0]._id
        });
    }, a.findOnebyIdtoEdit = function() {
        a.firstName__C = a.mySelections[0].firstName__C, a.id__C = a.mySelections[0]._id, 
        a.lastName__C = a.mySelections[0].lastName__C, a.company__C = a.mySelections[0].company__C, 
        a.phone__C = a.mySelections[0].phone__C, a.address__C = a.mySelections[0].address__C, 
        a.date__C = a.mySelections[0].date__C, a.country__c = a.mySelections[0].country__c;
    };
} ]), angular.module("accounts").factory("Accounts", [ "$resource", function(a) {
    return a("accounts/:accountId", {
        accountId: "@_id"
    }, {
        update: {
            method: "PUT"
        }
    });
} ]), angular.module("contacts").config([ "$stateProvider", function(a) {
    a.state("listContacts", {
        url: "/contacts",
        templateUrl: "modules/contacts/views/list-contacts.client.view.html"
    }).state("createContact", {
        url: "/contacts/create",
        templateUrl: "modules/contacts/views/create-contact.client.view.html"
    }).state("viewContact", {
        url: "/contacts/:contactId",
        templateUrl: "modules/contacts/views/view-contact.client.view.html"
    }).state("editContact", {
        url: "/contacts/:contactId/edit",
        templateUrl: "modules/contacts/views/edit-contact.client.view.html"
    });
} ]), angular.module("contacts").controller("ContactsController", [ "$scope", "$stateParams", "$location", "Authentication", "Contacts", function(a, b, c, d, e) {
    a.authentication = d, a.myData = [], a.myData = e.query(), a.mySelections = [], 
    a.filterOptions = {
        filterText: "",
        useExternalFilter: !0
    }, a.totalServerItems = 0, a.pagingOptions = {
        pageSizes: [ 250, 500, 1e3 ],
        pageSize: 250,
        currentPage: 1
    }, a.setPagingData = function(b, c, d) {
        var e = b.slice((c - 1) * d, c * d);
        a.myData = e, a.totalServerItems = b.length, a.$$phase || a.$apply();
    }, a.getPagedDataAsync = function(b, c, d) {
        setTimeout(function() {
            var e;
            if (d) {
                var f = d.toLowerCase();
                $http.get("jsonFiles/largeLoad.json").success(function(d) {
                    e = d.filter(function(a) {
                        return -1 != JSON.stringify(a).toLowerCase().indexOf(f);
                    }), a.setPagingData(e, c, b);
                });
            } else $http.get("jsonFiles/largeLoad.json").success(function(d) {
                a.setPagingData(d, c, b);
            });
        }, 100);
    }, a.getPagedDataAsync(a.pagingOptions.pageSize, a.pagingOptions.currentPage), a.$watch("pagingOptions", function(b, c) {
        b !== c && b.currentPage !== c.currentPage && a.getPagedDataAsync(a.pagingOptions.pageSize, a.pagingOptions.currentPage, a.filterOptions.filterText);
    }, !0), a.$watch("filterOptions", function(b, c) {
        b !== c && a.getPagedDataAsync(a.pagingOptions.pageSize, a.pagingOptions.currentPage, a.filterOptions.filterText);
    }, !0), a.gridOptions = {
        data: "myData",
        enablePaging: !0,
        showFooter: !0,
        totalServerItems: "totalServerItems",
        pagingOptions: a.pagingOptions,
        filterOptions: a.filterOptions,
        selectedItems: a.mySelections,
        multiSelect: !1,
        columnDefs: [ {
            field: "firstName__C",
            displayName: "First Name"
        }, {
            field: "lastName__C",
            displayName: "Last Name"
        }, {
            field: "company__C",
            displayName: "Company"
        }, {
            field: "phone__C",
            displayName: "Phone"
        }, {
            field: "address__C",
            displayName: "Address"
        }, {
            field: "date__C",
            displayName: "Date"
        }, {
            field: "country__c",
            displayName: "Country"
        } ]
    }, a.create = function() {
        if (angular.isUndefined(this.id__C)) {
            var b = new e({
                firstName__C: this.firstName__C,
                lastName__C: this.lastName__C,
                company__C: this.company__C,
                phone__C: this.phone__C,
                address__C: this.address__C,
                date__C: this.date__C,
                country__c: this.country__c
            });
            b.$save(function() {
                a.firstName__C = "", a.lastName__C = "", a.company__C = "", a.phone__C = "", a.address__C = "", 
                a.date__C = "", a.country__c = "", a.myData = e.query();
            }, function(b) {
                a.error = b.data.message;
            });
        } else {
            var b = new e({
                firstName__C: this.firstName__C,
                lastName__C: this.lastName__C,
                company__C: this.company__C,
                phone__C: this.phone__C,
                address__C: this.address__C,
                date__C: this.date__C,
                country__c: this.country__c,
                _id: this.id__C
            });
            a.update(b);
        }
    }, a.remove = function(b) {
        if (b) {
            b.$remove();
            for (var c in a.contacts) a.contacts[c] === b && a.contacts.splice(c, 1);
        } else a.contact.$remove(function() {
            a.myData = e.query();
        });
    }, a.update = function() {
        var b = a.contact;
        b.$update(function() {
            a.firstName__C = "", a.lastName__C = "", a.company__C = "", a.phone__C = "", a.address__C = "", 
            a.date__C = "", a.country__c = "", a.id__C = "", a.myData = e.query();
        }, function(b) {
            a.error = b.data.message;
        });
    }, a.find = function() {
        a.contacts = e.query();
    }, a.findOne = function() {
        a.contact = e.get({
            contactId: b.contactId
        });
    }, a.findOnebyId = function() {
        a.contact = e.get({
            contactId: a.mySelections[0]._id
        });
    }, a.findOnebyIdtoEdit = function() {
        a.firstName__C = a.mySelections[0].firstName__C, a.id__C = a.mySelections[0]._id, 
        a.lastName__C = a.mySelections[0].lastName__C, a.company__C = a.mySelections[0].company__C, 
        a.phone__C = a.mySelections[0].phone__C, a.address__C = a.mySelections[0].address__C, 
        a.date__C = a.mySelections[0].date__C, a.country__c = a.mySelections[0].country__c;
    };
} ]), angular.module("contacts").factory("Contacts", [ "$resource", function(a) {
    return a("contacts/:contactId", {
        contactId: "@_id"
    }, {
        update: {
            method: "PUT"
        }
    });
} ]), angular.module("core").config([ "$stateProvider", "$urlRouterProvider", function(a, b) {
    b.otherwise("/"), a.state("home", {
        url: "/",
        templateUrl: "modules/users/views/authentication/signin.client.view.html"
    }).state("userhome", {
        url: "/userhome",
        templateUrl: "modules/core/views/userindexpage.html"
    }).state("accountDetailPage", {
        url: "/accountDetailPage",
        templateUrl: "modules/accounts/views/account-home.html"
    }).state("contactDetailPage", {
        url: "/contactDetailPage",
        templateUrl: "modules/contacts/views/contact-home.html"
    }).state("adminsingupPage", {
        url: "/adminsingupPage",
        templateUrl: "modules/organizations/views/admin-login.html"
    }).state("superadminindexpage", {
        url: "/superadminindexpage",
        templateUrl: "modules/core/views/superadminindexpage.html"
    }).state("adminindexpage", {
        url: "/adminindexpage",
        templateUrl: "modules/core/views/adminindexpage.html"
    }).state("uploadimage", {
        url: "/uploadimage",
        templateUrl: "modules/core/views/uploadimage.html"
    }).state("createRoles", {
        url: "/createRoles",
        templateUrl: "modules/core/views/createRoles.html"
    }).state("viewadmins", {
        url: "/viewadmins",
        templateUrl: "modules/core/views/viewadmins.html"
    }).state("createuserpage", {
        url: "/createuserpage",
        templateUrl: "modules/users/views/authentication/signup.client.view.html"
    }).state("viewusers", {
        url: "/viewusers",
        templateUrl: "modules/core/views/viewusers.html"
    });
} ]);

var app = angular.module("core");

app.controller("HeaderController", [ "$scope", "Authentication", "Menus", "sharedProperties", "Organizations", function(a, b, c, d, e) {
    a.authentication = b, a.isCollapsed = !1, a.AllCompanies = e.query(), a.findOne = function() {
        a.organization = e.get({
            organizationId: a.authentication.user.orgId
        }), console.log("$scope.organization1  = ", a.organization);
    }, angular.forEach(a.AllCompanies, function(b) {
        angular.forEach(b, function(c, d) {
            "_id" == d && c == a.authentication.user.orgId && (a.recvalue(b.name), console.log("  $scope.orgname  = " + a.orgname));
        });
    }), a.LogoName = "invoice.png", a.LogoName2 = "img", a.menu = c.getMenu("topbar"), 
    a.recvalue = function(b) {
        console.log("came inside"), a.varName = b, console.log("$scope.varName = ", a.varName);
    }, console.log("$scope.varName2 = ", a.varName), a.toggleCollapsibleMenu = function() {
        a.isCollapsed = !a.isCollapsed;
    }, a.$on("$stateChangeSuccess", function() {
        a.isCollapsed = !1;
    });
} ]), angular.module("core").controller("HomeController", [ "$scope", "Authentication", function(a, b) {
    a.authentication = b;
} ]), angular.module("core").service("Menus", [ function() {
    this.defaultRoles = [ "*" ], this.menus = {};
    var a = function(a) {
        if (!a) return this.isPublic;
        if (~this.roles.indexOf("*")) return !0;
        for (var b in a.roles) for (var c in this.roles) if (this.roles[c] === a.roles[b]) return !0;
        return !1;
    };
    this.validateMenuExistance = function(a) {
        if (a && a.length) {
            if (this.menus[a]) return !0;
            throw new Error("Menu does not exists");
        }
        throw new Error("MenuId was not provided");
    }, this.getMenu = function(a) {
        return this.validateMenuExistance(a), this.menus[a];
    }, this.addMenu = function(b, c, d) {
        return this.menus[b] = {
            isPublic: c || !1,
            roles: d || this.defaultRoles,
            items: [],
            shouldRender: a
        }, this.menus[b];
    }, this.removeMenu = function(a) {
        this.validateMenuExistance(a), delete this.menus[a];
    }, this.addMenuItem = function(b, c, d, e, f, g, h, i) {
        return this.validateMenuExistance(b), this.menus[b].items.push({
            title: c,
            link: d,
            menuItemType: e || "item",
            menuItemClass: e,
            uiRoute: f || "/" + d,
            isPublic: null === g || "undefined" == typeof g ? this.menus[b].isPublic : g,
            roles: null === h || "undefined" == typeof h ? this.menus[b].roles : h,
            position: i || 0,
            items: [],
            shouldRender: a
        }), this.menus[b];
    }, this.addSubMenuItem = function(b, c, d, e, f, g, h, i) {
        this.validateMenuExistance(b);
        for (var j in this.menus[b].items) this.menus[b].items[j].link === c && this.menus[b].items[j].items.push({
            title: d,
            link: e,
            uiRoute: f || "/" + e,
            isPublic: null === g || "undefined" == typeof g ? this.menus[b].items[j].isPublic : g,
            roles: null === h || "undefined" == typeof h ? this.menus[b].items[j].roles : h,
            position: i || 0,
            shouldRender: a
        });
        return this.menus[b];
    }, this.removeMenuItem = function(a, b) {
        this.validateMenuExistance(a);
        for (var c in this.menus[a].items) this.menus[a].items[c].link === b && this.menus[a].items.splice(c, 1);
        return this.menus[a];
    }, this.removeSubMenuItem = function(a, b) {
        this.validateMenuExistance(a);
        for (var c in this.menus[a].items) for (var d in this.menus[a].items[c].items) this.menus[a].items[c].items[d].link === b && this.menus[a].items[c].items.splice(d, 1);
        return this.menus[a];
    }, this.addMenu("topbar");
} ]), angular.module("licenses").config([ "$stateProvider", function(a) {
    a.state("listLicenses", {
        url: "/licenses",
        templateUrl: "modules/licenses/views/list-licenses.client.view.html"
    }).state("createLicense", {
        url: "/licenses/create",
        templateUrl: "modules/licenses/views/create-license.client.view.html"
    }).state("viewLicense", {
        url: "/licenses/:licenseId",
        templateUrl: "modules/licenses/views/view-license.client.view.html"
    }).state("editLicense", {
        url: "/licenses/:licenseId/edit",
        templateUrl: "modules/licenses/views/edit-license.client.view.html"
    });
} ]), angular.module("licenses", []).service("licenseProperties", [ "Licenses", "$q", function(a, b) {
    return {
        create: function(c, d) {
            var e = b.defer(), f = new a({
                name: c
            });
            f.$save(function(a) {
                e.resolve(a);
            }, function() {
                e.reject();
            });
            var g = e.promise;
            g.then(function(a) {
                d(a);
            });
        }
    };
} ]), angular.module("licenses").controller("LicensesController", [ "$scope", "$stateParams", "$location", "Authentication", "Licenses", function(a, b, c, d, e) {
    a.authentication = d, a.create = function() {
        var b = new e({
            name: this.name
        });
        b.$save(function(b) {
            c.path("licenses/" + b._id), a.name = "";
        }, function(b) {
            a.error = b.data.message;
        });
    }, a.remove = function(b) {
        if (b) {
            b.$remove();
            for (var d in a.licenses) a.licenses[d] === b && a.licenses.splice(d, 1);
        } else a.license.$remove(function() {
            c.path("licenses");
        });
    }, a.update = function() {
        var b = a.license;
        b.$update(function() {
            c.path("licenses/" + b._id);
        }, function(b) {
            a.error = b.data.message;
        });
    }, a.find = function() {
        a.licenses = e.query();
    }, a.findOne = function() {
        a.license = e.get({
            licenseId: b.licenseId
        });
    };
} ]), angular.module("licenses").factory("Licenses", [ "$resource", function(a) {
    return a("licenses/:licenseId", {
        licenseId: "@_id"
    }, {
        update: {
            method: "PUT"
        }
    });
} ]), angular.module("organizations").config([ "$stateProvider", function(a) {
    a.state("listOrganizations", {
        url: "/organizations",
        templateUrl: "modules/organizations/views/list-organizations.client.view.html"
    }).state("createOrganization", {
        url: "/organizations/create",
        templateUrl: "modules/organizations/views/create-organization.client.view.html"
    }).state("viewOrganization", {
        url: "/organizations/:organizationId",
        templateUrl: "modules/organizations/views/view-organization.client.view.html"
    }).state("editOrganization", {
        url: "/organizations/:organizationId/edit",
        templateUrl: "modules/organizations/views/edit-organization.client.view.html"
    });
} ]);

var app = angular.module("organizations", [ "angularFileUpload" ]);

app.service("sharedProperties", [ "Organizations", "$q", "$stateParams", function(a, b) {
    var c = a.query();
    return {
        create: function(c, d) {
            var e = b.defer(), f = new a({
                name: c
            });
            f.$save(function(a) {
                e.resolve(a);
            }, function() {
                e.reject();
            });
            var g = e.promise;
            g.then(function(a) {
                d(a);
            });
        },
        orgLength: function() {
            return c;
        },
        findOne: function() {
            var b = a.get({
                organizationId: $scope.authentication.user.orgId
            });
            return b;
        }
    };
} ]), app.directive("file", function() {
    return {
        $scope: {
            file: "="
        },
        link: function(a, b) {
            b.bind("change", function(b) {
                var c = b.target.files[0];
                a.file = c ? c : void 0, a.$apply();
            });
        }
    };
}), app.controller("OrganizationsController", [ "$scope", "$stateParams", "$location", "Authentication", "Organizations", "$http", "$upload", function(a, b, c, d, e, f, g) {
    a.authentication = d, a.AllCompanyNames = e.query(), a.create = function(b) {
        var c = new e({
            name: b
        });
        return c.$save(function() {}, function(b) {
            a.error = b.data.message;
        }), response._id;
    }, a.remove = function(b) {
        if (b) {
            b.$remove();
            for (var d in a.organizations) a.organizations[d] === b && a.organizations.splice(d, 1);
        } else a.organization.$remove(function() {
            c.path("organizations");
        });
    }, a.update = function() {
        var b = a.organization;
        b.$update(function() {
            c.path("organizations/" + b._id);
        }, function(b) {
            a.error = b.data.message;
        });
    }, a.find = function() {
        a.organizations = e.query();
    }, a.findOne = function() {
        a.organization = e.get({
            organizationId: b.organizationId
        });
    }, a.onDropSelect = function(b) {
        a.selectedFiles = [];
        for (var c = 0; c < b.length; c++) a.selectedFiles = b[c];
        console.log(" $scope.selectedFiles: %j", a.selectedFiles);
    }, a.updateSth = function() {
        a.cname2 = a.Orglist.name, console.log(" $scope.cname2 ---", +a.cname2), f({
            method: "POST",
            url: "/upload",
            headers: {
                "Content-Type": "multipart/form-data"
            },
            data: {
                name: a.cname2,
                file: a.file,
                dropfile: a.selectedFiles
            },
            transformRequest: function(a, b) {
                var c = new FormData();
                angular.forEach(a, function(a, b) {
                    c.append(b, a), console.log("key---->" + b), console.log("value", a);
                });
                var d = b();
                return delete d["Content-Type"], c;
            }
        });
    }, a.files = [], a.setFiles = function(b) {
        a.$apply(function(a) {
            console.log("fields:", b.fields);
            for (var c = 0; c < b.files.length; c++) a.files.push(b.files[c]);
            a.progressVisible = !1, console.log("$scope.cname1: " + a.cname), console.log("$scope.file: %j", a.file);
        });
    }, a.onFileSelect = function() {
        var b = new FormData();
        for (var c in a.files) b.append("uploadedFile", a.files[c]);
        var d = a.files;
        return console.log("image:", d), angular.isArray(d) && (d = d[0]), angular.forEach(d[0], function(a, b) {
            console.log(b + " $scope.files--> " + a);
        }), "image/png" !== d.type && "image/jpeg" !== d.type ? void alert("Only PNG and JPEG are accepted.") : (a.uploadInProgress = !0, 
        a.uploadProgress = 0, a.upload = g.upload({
            url: "/upload",
            method: "POST",
            file: d,
            field: a.cname
        }).progress(function(b) {
            a.progressVisible = !0, a.uploadProgress = Math.floor(b.loaded / b.total), a.progress = Math.round(100 * b.loaded / b.total), 
            a.$apply();
        }).success(function() {
            a.progressVisible = !0, a.uploadInProgress = !1;
        }).error(function(b) {
            alert("failed"), a.uploadInProgress = !1, console.log("Error uploading file: " + b.message || b);
        }), void (a.upload = ""));
    };
} ]), angular.module("organizations").factory("Organizations", [ "$resource", function(a) {
    return a("organizations/:organizationId", {
        organizationId: "@_id"
    }, {
        update: {
            method: "PUT"
        }
    });
} ]), angular.module("roles").config([ "$stateProvider", function(a) {
    a.state("listRoles", {
        url: "/roles",
        templateUrl: "modules/roles/views/list-roles.client.view.html"
    }).state("createRole", {
        url: "/roles/create",
        templateUrl: "modules/roles/views/create-role.client.view.html"
    }).state("viewRole", {
        url: "/roles/:roleId",
        templateUrl: "modules/roles/views/view-role.client.view.html"
    }).state("editRole", {
        url: "/roles/:roleId/edit",
        templateUrl: "modules/roles/views/edit-role.client.view.html"
    });
} ]), angular.module("roles", []).service("rolesProperties", [ "Roles", function(a) {
    var b = a.query();
    return {
        all: function() {
            return b;
        },
        first: function() {
            return b[0];
        }
    };
} ]), angular.module("roles").controller("RolesCreateController", [ "$scope", "$stateParams", "$location", "Roles", function(a, b, c, d) {
    a.create = function() {
        var b = new d({
            name: this.name
        });
        b.$save(function() {
            a.name = "", alert("Role is Created"), c.path("/superadminindexpage");
        }, function(b) {
            a.error = b.data.message;
        });
    };
} ]), angular.module("roles").controller("RolesController", [ "$scope", "$stateParams", "$location", "Authentication", "Roles", function(a, b, c, d, e) {
    a.create = function() {
        var b = new e({
            name: this.name
        });
        b.$save(function(b) {
            c.path("roles/" + b._id), a.name = "";
        }, function(b) {
            a.error = b.data.message;
        });
    }, a.remove = function(b) {
        if (b) {
            b.$remove();
            for (var d in a.roles) a.roles[d] === b && a.roles.splice(d, 1);
        } else a.role.$remove(function() {
            c.path("roles");
        });
    }, a.update = function() {
        var b = a.role;
        b.$update(function() {
            c.path("roles/" + b._id);
        }, function(b) {
            a.error = b.data.message;
        });
    }, a.find = function() {
        a.roles = e.query();
    }, a.findOne = function() {
        a.role = e.get({
            roleId: b.roleId
        });
    };
} ]), angular.module("roles").factory("Roles", [ "$resource", function(a) {
    return a("roles/:roleId", {
        roleId: "@_id"
    }, {
        update: {
            method: "PUT"
        }
    });
} ]), angular.module("users").config([ "$httpProvider", function(a) {
    a.interceptors.push([ "$q", "$location", "Authentication", function(a, b, c) {
        return {
            responseError: function(d) {
                switch (d.status) {
                  case 401:
                    c.user = null, b.path("signin");
                    break;

                  case 403:                }
                return a.reject(d);
            }
        };
    } ]);
} ]), angular.module("users").config([ "$stateProvider", function(a) {
    a.state("profile", {
        url: "/settings/profile",
        templateUrl: "modules/users/views/settings/edit-profile.client.view.html"
    }).state("password", {
        url: "/settings/password",
        templateUrl: "modules/users/views/settings/change-password.client.view.html"
    }).state("accounts", {
        url: "/settings/accounts",
        templateUrl: "modules/users/views/settings/social-accounts.client.view.html"
    }).state("signup", {
        url: "/signup",
        templateUrl: "modules/users/views/authentication/signup.client.view.html"
    }).state("signin", {
        url: "/signin",
        templateUrl: "modules/users/views/authentication/signin.client.view.html"
    }).state("forgot", {
        url: "/password/forgot",
        templateUrl: "modules/users/views/password/forgot-password.client.view.html"
    }).state("reset-invlaid", {
        url: "/password/reset/invalid",
        templateUrl: "modules/users/views/password/reset-password-invalid.client.view.html"
    }).state("reset-success", {
        url: "/password/reset/success",
        templateUrl: "modules/users/views/password/reset-password-success.client.view.html"
    }).state("reset", {
        url: "/password/reset/:token",
        templateUrl: "modules/users/views/password/reset-password.client.view.html"
    });
} ]);

var app = angular.module("users", []);

app.controller("AuthenticationController", [ "$scope", "$http", "$location", "Authentication", "sharedProperties", "Users", "$stateParams", "licenseProperties", "rolesProperties", function(a, b, c, d, e, f, g, h, i) {
    a.authentication = d, a.GlobalRoles = i.all(), a.GlobalUsers = f.query(), a.GlobalOrganizations = e.orgLength(), 
    a.LogoName = "invoice.png", a.find = function() {
        a.users = a.GlobalUsers, a.onlyUsers = [], angular.forEach(a.users, function(b) {
            angular.forEach(b, function(c, d) {
                "orgId" == d && c == a.authentication.user.orgId && a.onlyusers.push(b);
            });
        }), console.log("$scope.onlyusers = " + a.onlyUsers), console.log("$scope.authentication.user.orgId = " + a.authentication.user.orgId), 
        a.gridOptions = {
            data: "onlyUsers",
            enablePaging: !0,
            showFooter: !0,
            totalServerItems: "totalServerItems",
            pagingOptions: a.pagingOptions,
            filterOptions: a.filterOptions,
            selectedItems: a.mySelections,
            multiSelect: !1
        };
    }, a.signup = function() {
        a.credentials.role = a.credentials.newrole._id, null != a.credentials.companyName && "" != a.credentials.companyName ? (null != a.credentials.licenses && "" != a.credentials.licenses && (console.log(" if $scope.credentials-->" + a.credentials), 
        h.create(a.credentials.licenses, function(a) {
            angular.forEach(a, function() {});
        })), e.create(a.credentials.companyName, function(b) {
            angular.forEach(b, function(b, c) {
                "_id" == c && a.assingValue(b);
            });
        })) : (a.credentials.orgId = a.authentication.user.orgId, a.length = 0, angular.forEach(a.GlobalUsers, function(b) {
            angular.forEach(b, function(b, c) {
                "orgId" == c && b == a.authentication.user.orgId && a.length++;
            });
        }), a.authentication.user.licenses > a.length ? b.post("/auth/signup", a.credentials).success(function() {
            c.path("/adminindexpage");
        }).error(function(b) {
            a.error = b.message;
        }) : (alert("sorry!. Your Licenses are over"), a.credentials = ""));
    }, a.assingValue = function(d) {
        a.credentials.orgId = d, b.post("/auth/signup", a.credentials).success(function(b) {
            a.authentication.user = b, c.path("/superadminindexpage");
        }).error(function(b) {
            a.error = b.message;
        });
    }, a.signin = function() {
        b.post("/auth/signin", a.credentials).success(function(b) {
            a.authentication.user = b, a.signinuser = a.authentication.user, a.userRole = a.authentication.user.role, 
            angular.forEach(a.GlobalRoles, function(b) {
                angular.forEach(b, function(d, e) {
                    if ("_id" == e && d == a.userRole) switch (b.name) {
                      case "superAdmin":
                        c.path("/superadminindexpage");
                        break;

                      case "Admin":
                        c.path("/adminindexpage");
                        break;

                      case "admin":
                        c.path("/adminindexpage");
                        break;

                      case "user":
                        c.path("/userhome");
                        break;

                      default:
                        c.path("/userhome");
                    }
                });
            });
        }).error(function(b) {
            a.error = b.message;
        }), angular.forEach(a.signinuser, function(a, b) {
            console.log(b + "signinuserinside-->" + a);
        });
    };
} ]), angular.module("users").controller("PasswordController", [ "$scope", "$stateParams", "$http", "$location", "Authentication", function(a, b, c, d, e) {
    a.authentication = e, a.authentication.user && d.path("/"), a.askForPasswordReset = function() {
        a.success = a.error = null, c.post("/auth/forgot", a.credentials).success(function(b) {
            a.credentials = null, a.success = b.message;
        }).error(function(b) {
            a.credentials = null, a.error = b.message;
        });
    }, a.resetUserPassword = function() {
        a.success = a.error = null, c.post("/auth/reset/" + b.token, a.passwordDetails).success(function(b) {
            a.passwordDetails = null, e.user = b, d.path("/password/reset/success");
        }).error(function(b) {
            a.error = b.message;
        });
    };
} ]), angular.module("users").controller("SettingsController", [ "$scope", "$http", "$location", "Users", "Authentication", function(a, b, c, d, e) {
    a.user = e.user, a.user || c.path("/"), a.hasConnectedAdditionalSocialAccounts = function() {
        for (var b in a.user.additionalProvidersData) return !0;
        return !1;
    }, a.isConnectedSocialAccount = function(b) {
        return a.user.provider === b || a.user.additionalProvidersData && a.user.additionalProvidersData[b];
    }, a.removeUserSocialAccount = function(c) {
        a.success = a.error = null, b.delete("/users/accounts", {
            params: {
                provider: c
            }
        }).success(function(b) {
            a.success = !0, a.user = e.user = b;
        }).error(function(b) {
            a.error = b.message;
        });
    }, a.updateUserProfile = function(b) {
        if (b) {
            a.success = a.error = null;
            var c = new d(a.user);
            c.$update(function(b) {
                a.success = !0, e.user = b;
            }, function(b) {
                a.error = b.data.message;
            });
        } else a.submitted = !0;
    }, a.changeUserPassword = function() {
        a.success = a.error = null, b.post("/users/password", a.passwordDetails).success(function() {
            a.success = !0, a.passwordDetails = null;
        }).error(function(b) {
            a.error = b.message;
        });
    };
} ]), angular.module("users").factory("Authentication", [ function() {
    var a = this;
    return a._data = {
        user: window.user
    }, a._data;
} ]), angular.module("users").factory("Users", [ "$resource", function(a) {
    return a("users", {}, {
        update: {
            method: "PUT"
        }
    });
} ]);